input {
	udp {
		port => 2055
        codec => netflow {
            ipfix_definitions => "/etc/logstash/ipfix.yaml"
            versions => [10]
        }
        receive_buffer_bytes => 16777216
        workers              => 4
	}
}

filter {
    translate {
        field => "[netflow][flowset_id]"
        destination => "flowtype"
        dictionary_path => "/etc/logstash/pipeline-res/flowtypes.yml"
        fallback => "unknown"
    }

    # Detect address family based on field existence
    if [netflow][sourceIPv6Address] {
        mutate { add_field => { "addressFamily" => "IPv6" } }
        mutate { add_field => { 
            "[@metadata][dst]" => "%{[netflow][destinationIPv6Address]}" 
            }
        }
    } else if [netflow][sourceIPv4Address] {
        mutate { add_field => { "addressFamily" => "IPv4" } }
        mutate { add_field => { 
            "[@metadata][dst]" => "%{[netflow][destinationIPv4Address]}" 
            }
        }
    } else {
        mutate { add_field => { "addressFamily" => "Any" } }
    }

    ruby {
        init => "require 'time'"
        code => "event.set('[transitionDurationMilliseconds]',  (Time.iso8601(event.get('[netflow][flowEndMicroseconds]')) - Time.iso8601(event.get('[netflow][flowStartMicroseconds]'))) * 1000);"
    }

    if [addressFamily] != "Any" {
        # helpers to alias common cloud providers
        cidr {
            address => [ "%{[@metadata][dst]}" ]
            add_field => { "remoteService" => "UCLouvain" }
            network => [ "130.104.0.0/16", "2001:6a8:308f::/44" ]
        }
        
        # Only match if not yet found
        if ![remoteService] {
            cidr {
                address => [ "%{[@metadata][dst]}" ]
                add_field => { "remoteService" => "Google" }
                network_path => "/etc/logstash/pipeline-res/Google.prefixes"
            }
        }
        if ![remoteService] {
            cidr {
                address => [ "%{[@metadata][dst]}" ]
                add_field => { "remoteService" => "Facebook" }
                network_path => "/etc/logstash/pipeline-res/Facebook.prefixes"
            }
        }
        if ![remoteService] {
            cidr {
                address => [ "%{[@metadata][dst]}" ]
                add_field => { "remoteService" => "Microsoft" }
                network_path => "/etc/logstash/pipeline-res/Microsoft.prefixes"
            }
        }
        # catch-all clause
        if ![remoteService] {
            mutate { add_field => { "remoteService" => "Unknown" } }
        }
    } else {
        mutate { add_field => { "remoteService" => "Any" } }
    }
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
        index => "logstash-ipfix-2055-%{+YYYY.MM.dd}"
	}
}
